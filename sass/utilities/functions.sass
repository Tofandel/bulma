@function mergeColorMaps($bulma-colors, $custom-colors)
  // We return at least Bulma's hard-coded colors
  $merged-colors: $bulma-colors

  // We want a map as input
  @if type-of($custom-colors) == 'map'
    @each $name, $components in $custom-colors
      // The color name should be a string
      // and the components either a single color
      // or a colors list with at least one element
      @if type-of($name) == 'string' and (type-of($components) == 'list' or type-of($components) == 'color') and length($components) >= 1
        $color-base: null
        $color-invert: null
        $color-light: null
        $color-dark: null
        $value: null

        // The param can either be a single color
        // or a list of 2 colors
        @if type-of($components) == 'color'
          $color-base: $components
          $color-invert: findColorInvert($color-base)
          $color-light: findLightColor($color-base)
          $color-dark: findDarkColor($color-base)
        @else if type-of($components) == 'list'
          $color-base: nth($components, 1)
          // If Invert, Light and Dark are provided
          @if length($components) > 3
            $color-invert: nth($components, 2)
            $color-light: nth($components, 3)
            $color-dark: nth($components, 4)
            // If only Invert and Light are provided
          @else if length($components) > 2
            $color-invert: nth($components, 2)
            $color-light: nth($components, 3)
            $color-dark: findDarkColor($color-base)
            // If only Invert is provided
          @else
            $color-invert: nth($components, 2)
            $color-light: findLightColor($color-base)
            $color-dark: findDarkColor($color-base)

        $value: ($color-base, $color-invert, $color-light, $color-dark)

        // We only want to merge the map if the color base is an actual color
        @if type-of($color-base) == 'color'
          // We merge this colors elements as map with Bulma's colors map
          // (we can override them this way, no multiple definition for the same name)
          // $merged-colors: map_merge($merged-colors, ($name: ($color-base, $color-invert, $color-light, $color-dark)))
          $merged-colors: map_merge($merged-colors, ($name: $value))

  @return $merged-colors

@function powerNumber($number, $exp)
  $value: 1
  @if $exp > 0
    @for $i from 1 through $exp
      $value: $value * $number
  @else if $exp < 0
    @for $i from 1 through -$exp
      $value: $value / $number
  @return $value

@function colorLuminance($color)
  @if type-of($color) != 'color'
    @return 0.55
  $color-rgb: ('red': red($color), 'green': green($color), 'blue': blue($color))
  @each $name, $value in $color-rgb
    $adjusted: 0
    $value: $value / 255
    @if $value < 0.03928
      $value: $value / 12.92
    @else
      $value: ($value + .055) / 1.055
      $value: powerNumber($value, 2)
    $color-rgb: map-merge($color-rgb, ($name: $value))
  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722)

@function findColorInvert($color)
  @if (type_of($color) == "string")
    $color: getRegistered($color)

  @if type-of($color) == 'color'
    @if (colorLuminance($color) > 0.55)
      @return bulmaRgba(#000, 0.7)
    @else
      @return #fff

  @return #fff

@function findLightColor($color)
  @if (type_of($color) == "string")
    $color: getRegistered($color)

  @if type-of($color) == 'color'
    $l: 96%
    @if lightness($color) > 96%
      $l: lightness($color)
    @return change-color($color, $lightness: $l)

  @return $light

@function findDarkColor($color)
  @if (type_of($color) == "string")
    $color: getRegistered($color)

  @if type-of($color) == 'color'
    $base-l: 29%
    $luminance: colorLuminance($color)
    $luminance-delta: (0.53 - $luminance)
    $target-l: round($base-l + ($luminance-delta * 53))
    @return change-color($color, $lightness: max($base-l, $target-l))
  @return $dark

@function bulmaRgba($color, $alpha)
  @if type-of($color) != 'color'
    @return $color
  @return rgba($color, $alpha)

@function bulmaDarken($color, $amount)
  @if type-of($color) != 'color'
    @return $color
  @if $amount > 0
    @return darken($color, $amount)
  @else
    @return lighten($color, -$amount)

@function str-replace($string, $search, $replace: '')
  $index: str-index($string, $search)

  @if $index
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace)
  @return $string

@function str-split($string, $separator)
  // empty array/list
  $split-arr: ()
  // first index of separator in string
  $index: str-index($string, $separator)
  // loop through string
  @while $index != null
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1)
    // push item to array
    $split-arr: append($split-arr, $item)
    // remove item and separator from string
    $string: str-slice($string, $index + str-length($separator))
    // find new index of separator
    $index: str-index($string, $separator)

  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string)

  @return $split-arr

$hash_map: ()

@function shorten-var($string)
  @if $shorten
    $short: $string
    @each $find, $replace in ("background": "bg", "invert": "inv", "scheme": "sch", "text": "txt", "large": "lg", "disabled": "dsbl", "current": "cur", "toggle": "tgl", "border": "bd", "margin": "m", "padding": "p", "color": "clr", "size": "s", "button": "bt", "warning": "warn", "danger": "dang", "success": "sucs", "primary": "prim", "dimensions": "dim", "content": "ct", "heading": "hdg", "header": "hd", "footer": "ft", "notification": "noti", "progress": "prg", "dropdown": "drp", "divider": "dvd", "item": "itm", "hover": "hov", "focus": "foc", "active": "act", "message": "msg", "pagination": "pag", "control": "ctrl", "breadcrumb": "bread", "navbar": "nav", "panel": "pnl", "section": "sct")
      $short: str-replace($short, $find, $replace)
    //@each $letter in (e, i, u, y)
    //  $short: str-replace($short, $letter, '')
    $hash_map: map_merge($hash_map, ($short: $string)) !global
    $string: $short
  @return $string

@function unshorten-var($string)
  @if $shorten
    $string: map_get($hash_map, $string)
  @return $string

@function strip-unit($number)
  @if type-of($number) == 'number' and not unitless($number)
    @return $number / ($number * 0 + 1)

  @return $number

//Pluggables for theming
$registered_vars: ()
$used_vars: ()

@function isRegistered($name)
  @return map_get($registered_vars, $name) != null

@function isVColor($name)
  @return map_get($registered_vars, $name+"-h") != null

@function getRegistered($name: null)
  @if $name != null
    @if str-index($name, "var(--blm-") == 1
      $name: unshorten-var(str-slice(str-replace($name, " ", ""), 11, -2))

    $value: map_get($registered_vars, $name)
    @if not index($used_vars, $name)
      $used_vars: append($used_vars, $name) !global

    @if $themeable and type-of($value) == "string"
      @if str-index($value, "hsla(") == 1
        $value: str-slice($value, 6, -2)
        //Remove hsla() part
        $parts: str-split($value, ',')

        $value: hsla(getRegistered(nth($parts, 1)), getRegistered(nth($parts, 2)), getRegistered(nth($parts, 3)), getRegistered(nth($parts, 4))) !global
      @elseif str-index($value, "var(--blm-") == 1
        $value: getRegistered($value)

    @return $value
  @return $registered_vars

@function vRegister($name, $value)
  @if function-exists(_vRegister)
    $value: _vRegister($name, $value)

  @if $themeable
    @if type-of($value) == "color"
      $registered_vars: map-merge($registered_vars, (#{$name}-h: hue($value), #{$name}-s: saturation($value), #{$name}-l: lightness($value), #{$name}-a: opacity($value))) !global
    @else if type-of($value) == "string"
      @if str-index($value, "hsla(") == 1
        $value: str-slice($value, 5, -1)
        //Remove hsla() part
        $parts: str-split($value, ',')

        $registered_vars: map-merge($registered_vars, (#{$name}-h: nth($parts, 1), #{$name}-s: nth($parts, 2), #{$name}-l: nth($parts, 3), #{$name}-a: nth($parts, 4))) !global
      @if str-index($value, "var(--blm-") == 1
        $var: unshorten-var(str-slice(str-replace($value, " ", ""), 11, -2))
        @if isVColor($var)
          $registered_vars: map-merge($registered_vars, (#{$name}-h: var(varName($var+"-h")), #{$name}-s: var(varName($var+"-s")), #{$name}-l: var(varName($var+"-l")), #{$name}-a: var(varName($var+"-a")) )) !global

  @if isRegistered($name+"-h")
    $registered_vars: map-merge($registered_vars, (#{$name}: unquote("hsla(#{var(varName($name+"-h"))},#{var(varName($name+"-s"))},#{var(varName($name+"-l"))},#{var(varName($name+"-a"))})"))) !global
  @else
    $registered_vars: map-merge($registered_vars, ($name: $value)) !global

  @return $name

@mixin vRegister($name, $value)
  $null: vRegister($name, $value)

@function varName($name)
  @return --blm-#{shorten-var($name)}

@function v($name)
  $value: getRegistered($name)
  //Make sure to let the compiler know we used this variable
  @if ($themeable and not variable-exists(default_vars)) or (variable-exists(default_vars) and map_get($default_vars, $name))
    @if isRegistered($name)
      @return var(varName($name))
    @warn $name + " was not registered before use"
    @return null
  @else
    @if $value == null
      @warn $name + " was not registered before use"
    @return $value

@function vDarken($name, $amount)
  @return vAdjust($name, $lightness: -$amount)

@function vLighten($name, $amount)
  @return vDarken($name, -$amount)

@function vSaturate($name, $amount)
  @return vAdjust($name, $saturation: $amount)

@function vAlpha($name, $amount)
  @return vAdjust($name, $alpha: $amount)

@function vAlphaChange($name, $amount)
  @return vChange($name, $alpha: $amount)

@function maybeCalc($value, $increment)
  $no_u: strip-unit($increment)
  @if $no_u != 0
    @if $no_u > 0
      @return calc(#{$value} + #{$increment})
    @else
      @return calc(#{$value} - #{-$increment})
  @else
    @return $value


@function maybeCalcMult($value, $multiply)
  @if $multiply != 1
    @return calc(#{$value} * #{$multiply})
  @else
    @return $value

@function vAdjust($name, $hue: 0, $saturation: 0%, $lightness: 0%, $alpha: 1)
  @if $themeable
    @return hsla(maybeCalc(v(#{$name}-h), $hue + 0deg), maybeCalc(v(#{$name}-s), $saturation), maybeCalc(v(#{$name}-l), $lightness), maybeCalcMult(v(#{$name}-a), $alpha))
  @else
    $color: getRegistered($name)
    @if type_of($color) != "color"
      @warn $name + " is not a color"
      @return $color

    @if (unit($alpha) == '')
      $alpha: (1 - $alpha) * -100 + 0%

    @return scale_color(adjust_color($color, $hue: $hue, $saturation: $saturation, $lightness: $lightness), $alpha: $alpha)

@function vChange($name, $hue: null, $saturation: null, $lightness: null, $alpha: null)
  @if $themeable
    @if $hue == null
      $hue: v($name+"-h")
    @if $saturation == null
      $saturation: v($name+"-s")
    @if $lightness == null
      $lightness: v($name+"-l")
    @if $alpha == null
      $alpha: v($name+"-a")

    @return unquote("hsla(") + $hue, $saturation, $lightness, $alpha + unquote(")")
  @else
    $color: getRegistered($name)
    @if type_of($color) != "color"
      @warn $name + " is not a color"
      @return $color

    @return change_color($color, $hue: $hue, $saturation: $saturation, $lightness: $lightness, $alpha: $alpha)

